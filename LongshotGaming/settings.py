"""
Django settings for LongshotGaming project.

Generated by 'django-admin startproject' using Django 2.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

# Having problems? Comment this import and uncomment the next one for local development
import django_heroku
#import django
import dj_database_url
import os

# ----------------------------------------------------------------------------------------------------
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# ----------------------------------------------------------------------------------------------------
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_ROOT = BASE_DIR

# ----------------------------------------------------------------------------------------------------
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/
# ----------------------------------------------------------------------------------------------------
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')

# SECURITY WARNING: don't run with debug turned on in production!
# For local development, set to True
DEBUG = False

ALLOWED_HOSTS = ['localhost', '0.0.0.0', '127.0.0.1', 'longshot-gaming.herokuapp.com']

# ----------------------------------------------------------------------------------------------------
# Application definition
# ----------------------------------------------------------------------------------------------------
INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'social_django',
    'ComingSoon',
    'LongshotGaming',
    'User',
    'Leaderboard',
    'EventPage',
    'Homepage'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

# ----------------------------------------------------------------------------------------------------
# Social authentication 
# https://python-social-auth.readthedocs.io/en/latest/index.html
# Currently just using Google, although we could support other social sites
# relatively easy using social-auth-django
# ----------------------------------------------------------------------------------------------------
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.github.GithubOAuth2',
    'social_core.backends.twitter.TwitterOAuth',
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = { 'prompt': 'select_account' }

SOCIAL_AUTH_GOOGLE_OAUTH2_LOGIN_URL = 'login'
SOCIAL_AUTH_GOOGLE_OAUTH2_LOGOUT_URL = 'logout'
SOCIAL_AUTH_GOOGLE_OAUTH2_LOGIN_REDIRECT_URL = 'usersIndex'

SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. On some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.
    'social_core.pipeline.social_auth.social_details',

    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.
    #'social_core.pipeline.social_auth.social_uid',

    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if
    # defined).
    #'social_core.pipeline.social_auth.auth_allowed',

    # Checks if the current social-account is already associated in the site.
    #'social_core.pipeline.social_auth.social_user',

    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    #'social_core.pipeline.user.get_username',

    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',

    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social_core.pipeline.social_auth.associate_by_email',

    # Create a user account if we haven't found one yet.
    #'social_core.pipeline.user.create_user',

    # Create the record that associates the social account with the user.
    #'social_core.pipeline.social_auth.associate_user',

    # Populate the extra_data field in the social record with the values
    # specified by settings (and the default ones like access_token, etc).
    #'social_core.pipeline.social_auth.load_extra_data',

    # Update the user record with any changed info from the auth service.
    #'social_core.pipeline.user.user_details',

    # Call our method to create or get the user from local db storage, and redirect to
    # appropriate link...
    'User.views.create_user'
)

# ----------------------------------------------------------------------------------------------------
# Root URLs and WSGI name
# ----------------------------------------------------------------------------------------------------
ROOT_URLCONF = 'LongshotGaming.urls'
WSGI_APPLICATION = 'LongshotGaming.wsgi.application'

# ----------------------------------------------------------------------------------------------------
# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
# We are using sqlite3 for now, will possibly update in the future
# ----------------------------------------------------------------------------------------------------
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# ----------------------------------------------------------------------------------------------------
# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators
# ----------------------------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# ----------------------------------------------------------------------------------------------------
# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
# ----------------------------------------------------------------------------------------------------
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# ----------------------------------------------------------------------------------------------------
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/
# ----------------------------------------------------------------------------------------------------
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'staticfiles')
STATIC_URL = '/static/'

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    os.path.join(PROJECT_ROOT, 'EventPage', 'templates'),
    os.path.join(PROJECT_ROOT, 'ComingSoon', 'templates'),
    os.path.join(PROJECT_ROOT, 'Homepage', 'templates'),
    os.path.join(PROJECT_ROOT, 'Leaderboard', 'templates'),
    os.path.join(PROJECT_ROOT, 'User', 'templates'),
    os.path.join(PROJECT_ROOT, 'LongshotGaming', 'templates'),
)

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# ----------------------------------------------------------------------------------------------------
# Activate Django-Heroku.
# If developing locally, comment this line
# ----------------------------------------------------------------------------------------------------
django_heroku.settings(locals())